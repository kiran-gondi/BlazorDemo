@page "/blazor-forms"

<div class="col-12 offset-md-2 col-md-8 border">
    <div class="text-center pt-4">
        <h2 class="text-success">Product Form</h2>
        <hr />
    </div>

    <div class="mx-2 px-2">
        <EditForm FormName="ProductCreate" Model="Product"
        OnValidSubmit="HandleProductCreate"
        OnInvalidSubmit="HandleProductCreateInvalid">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="form-group py-2">
                Product Name
                <InputText class="form-control" @bind-Value="@Product.Name"></InputText>
                <ValidationMessage For="@(() => Product.Name)"/>
            </div>
            <div class="form-group py-2">
                Product Price
                <InputNumber class="form-control" @bind-Value="@Product.Price"></InputNumber>
                <ValidationMessage For="@(() => Product.Price)" />
            </div>
            <div class="form-group py-2">
                Category
                <InputSelect class="form-select" @bind-Value="@Product.Category">
                    @foreach (var category in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group py-2">
                IsActive
                <InputCheckbox @bind-Value=@Product.IsActive></InputCheckbox>
            </div>

            <div class="from-group py-2">
                Available After
                <InputDate class="form-control" @bind-Value="@Product.AvailableAfter"></InputDate>
            </div>

            @* <ValidationSummary></ValidationSummary> *@
            <button type="submit" class="btn btn-primary my-3" style="width:200px;">
                Create Product
            </button>
            <p class="text-success">@(IsProcessing ? "Processing...." : "")</p>
        </EditForm>

        <EditForm FormName="ProductCreateTemp" Model="ProductTemp"
        OnValidSubmit="HandleProductCreateTemp">
            <div class="form-group py-2">
                Product Name
                <InputText class="form-control" @bind-Value="@Product.Name"></InputText>
                <ValidationMessage For="@(() => Product.Name)" />
            </div>

            @if (!string.IsNullOrEmpty(ProdNameSecondForm))
            {
                <div class="form-group py-2" style="color: red">
                    @ProdNameSecondForm
                </div>
            }
            <button type="submit" class="btn btn-secondary my-3" style="width:200px;">
                Create Product Form 2
            </button>

        </EditForm>
    </div>

    @if (createdProduct != null)
    {
        <div class="mx-2 pt-4">
            <hr/>
            <h2 class="text-success"> Product Created </h2>
            <div class="px-4">
                Name: @createdProduct.Name <br />
                Price: @createdProduct.Price <br />
                Category: @createdProduct.Category <br />
                IsActive: @createdProduct.IsActive <br />
                Available After: @createdProduct.AvailableAfter<br/>
            </div>
        </div>
    }

</div>

@code {
    [SupplyParameterFromForm(Name = "ProductCreate")]
    public Product Product { get; set; } = new Product();

    [SupplyParameterFromForm(Name = "ProductCreateTemp")]
    public Product ProductTemp { get; set; } = new Product();

    private Product? createdProduct { get;set; }

    private string ProdNameSecondForm { get; set; }

    private bool IsProcessing { get; set; }

    private async Task HandleProductCreate()
    {
        IsProcessing = true;

        createdProduct = null;
        Product = new Product();
        await Task.Delay(3000);
        createdProduct = Product;
        Product = new Product();

        IsProcessing = false;
    }

    private async Task HandleProductCreateInvalid()
    {
        IsProcessing = true;
        await Task.Delay(5000);
        IsProcessing = false;
    }

    private async Task HandleProductCreateTemp()
    {
        IsProcessing = true;

        ProdNameSecondForm = "This data is from second form click! Woh woop";
        await Task.Delay(3000);

        IsProcessing = false;
    }

}
